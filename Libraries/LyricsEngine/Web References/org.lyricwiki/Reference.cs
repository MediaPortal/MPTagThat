//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1434.
// 
#pragma warning disable 1591

namespace LyricsEngine.org.lyricwiki {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LyricWikiBinding", Namespace="urn:LyricWiki")]
    public partial class LyricWiki : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback checkSongExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchArtistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchAlbumsOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchSongsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSOTDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSongOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSongResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback getArtistOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAlbumOperationCompleted;
        
        private System.Threading.SendOrPostCallback getHometownOperationCompleted;
        
        private System.Threading.SendOrPostCallback postArtistOperationCompleted;
        
        private System.Threading.SendOrPostCallback postAlbumOperationCompleted;
        
        private System.Threading.SendOrPostCallback postSongOperationCompleted;
        
        private System.Threading.SendOrPostCallback postSong_flagsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LyricWiki() {
            this.Url = global::LyricsEngine.Properties.Settings.Default.LyricsEngine_org_lyricwiki_LyricWiki;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event checkSongExistsCompletedEventHandler checkSongExistsCompleted;
        
        /// <remarks/>
        public event searchArtistsCompletedEventHandler searchArtistsCompleted;
        
        /// <remarks/>
        public event searchAlbumsCompletedEventHandler searchAlbumsCompleted;
        
        /// <remarks/>
        public event searchSongsCompletedEventHandler searchSongsCompleted;
        
        /// <remarks/>
        public event getSOTDCompletedEventHandler getSOTDCompleted;
        
        /// <remarks/>
        public event getSongCompletedEventHandler getSongCompleted;
        
        /// <remarks/>
        public event getSongResultCompletedEventHandler getSongResultCompleted;
        
        /// <remarks/>
        public event getArtistCompletedEventHandler getArtistCompleted;
        
        /// <remarks/>
        public event getAlbumCompletedEventHandler getAlbumCompleted;
        
        /// <remarks/>
        public event getHometownCompletedEventHandler getHometownCompleted;
        
        /// <remarks/>
        public event postArtistCompletedEventHandler postArtistCompleted;
        
        /// <remarks/>
        public event postAlbumCompletedEventHandler postAlbumCompleted;
        
        /// <remarks/>
        public event postSongCompletedEventHandler postSongCompleted;
        
        /// <remarks/>
        public event postSong_flagsCompletedEventHandler postSong_flagsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#checkSongExists", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool checkSongExists(string artist, string song) {
            object[] results = this.Invoke("checkSongExists", new object[] {
                        artist,
                        song});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkSongExistsAsync(string artist, string song) {
            this.checkSongExistsAsync(artist, song, null);
        }
        
        /// <remarks/>
        public void checkSongExistsAsync(string artist, string song, object userState) {
            if ((this.checkSongExistsOperationCompleted == null)) {
                this.checkSongExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckSongExistsOperationCompleted);
            }
            this.InvokeAsync("checkSongExists", new object[] {
                        artist,
                        song}, this.checkSongExistsOperationCompleted, userState);
        }
        
        private void OncheckSongExistsOperationCompleted(object arg) {
            if ((this.checkSongExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkSongExistsCompleted(this, new checkSongExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#searchArtists", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string[] searchArtists(string searchString) {
            object[] results = this.Invoke("searchArtists", new object[] {
                        searchString});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void searchArtistsAsync(string searchString) {
            this.searchArtistsAsync(searchString, null);
        }
        
        /// <remarks/>
        public void searchArtistsAsync(string searchString, object userState) {
            if ((this.searchArtistsOperationCompleted == null)) {
                this.searchArtistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchArtistsOperationCompleted);
            }
            this.InvokeAsync("searchArtists", new object[] {
                        searchString}, this.searchArtistsOperationCompleted, userState);
        }
        
        private void OnsearchArtistsOperationCompleted(object arg) {
            if ((this.searchArtistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchArtistsCompleted(this, new searchArtistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#searchAlbums", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string[] searchAlbums(string artist, string album, int year) {
            object[] results = this.Invoke("searchAlbums", new object[] {
                        artist,
                        album,
                        year});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void searchAlbumsAsync(string artist, string album, int year) {
            this.searchAlbumsAsync(artist, album, year, null);
        }
        
        /// <remarks/>
        public void searchAlbumsAsync(string artist, string album, int year, object userState) {
            if ((this.searchAlbumsOperationCompleted == null)) {
                this.searchAlbumsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchAlbumsOperationCompleted);
            }
            this.InvokeAsync("searchAlbums", new object[] {
                        artist,
                        album,
                        year}, this.searchAlbumsOperationCompleted, userState);
        }
        
        private void OnsearchAlbumsOperationCompleted(object arg) {
            if ((this.searchAlbumsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchAlbumsCompleted(this, new searchAlbumsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#searchSongs", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public SongResult searchSongs(string artist, string song) {
            object[] results = this.Invoke("searchSongs", new object[] {
                        artist,
                        song});
            return ((SongResult)(results[0]));
        }
        
        /// <remarks/>
        public void searchSongsAsync(string artist, string song) {
            this.searchSongsAsync(artist, song, null);
        }
        
        /// <remarks/>
        public void searchSongsAsync(string artist, string song, object userState) {
            if ((this.searchSongsOperationCompleted == null)) {
                this.searchSongsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchSongsOperationCompleted);
            }
            this.InvokeAsync("searchSongs", new object[] {
                        artist,
                        song}, this.searchSongsOperationCompleted, userState);
        }
        
        private void OnsearchSongsOperationCompleted(object arg) {
            if ((this.searchSongsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchSongsCompleted(this, new searchSongsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getSOTD", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public SOTDResult getSOTD() {
            object[] results = this.Invoke("getSOTD", new object[0]);
            return ((SOTDResult)(results[0]));
        }
        
        /// <remarks/>
        public void getSOTDAsync() {
            this.getSOTDAsync(null);
        }
        
        /// <remarks/>
        public void getSOTDAsync(object userState) {
            if ((this.getSOTDOperationCompleted == null)) {
                this.getSOTDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSOTDOperationCompleted);
            }
            this.InvokeAsync("getSOTD", new object[0], this.getSOTDOperationCompleted, userState);
        }
        
        private void OngetSOTDOperationCompleted(object arg) {
            if ((this.getSOTDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSOTDCompleted(this, new getSOTDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getSong", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public LyricsResult getSong(string artist, string song) {
            object[] results = this.Invoke("getSong", new object[] {
                        artist,
                        song});
            return ((LyricsResult)(results[0]));
        }
        
        /// <remarks/>
        public void getSongAsync(string artist, string song) {
            this.getSongAsync(artist, song, null);
        }
        
        /// <remarks/>
        public void getSongAsync(string artist, string song, object userState) {
            if ((this.getSongOperationCompleted == null)) {
                this.getSongOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSongOperationCompleted);
            }
            this.InvokeAsync("getSong", new object[] {
                        artist,
                        song}, this.getSongOperationCompleted, userState);
        }
        
        private void OngetSongOperationCompleted(object arg) {
            if ((this.getSongCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSongCompleted(this, new getSongCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getSongResult", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("songResult")]
        public LyricsResult getSongResult(string artist, string song) {
            object[] results = this.Invoke("getSongResult", new object[] {
                        artist,
                        song});
            return ((LyricsResult)(results[0]));
        }
        
        /// <remarks/>
        public void getSongResultAsync(string artist, string song) {
            this.getSongResultAsync(artist, song, null);
        }
        
        /// <remarks/>
        public void getSongResultAsync(string artist, string song, object userState) {
            if ((this.getSongResultOperationCompleted == null)) {
                this.getSongResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSongResultOperationCompleted);
            }
            this.InvokeAsync("getSongResult", new object[] {
                        artist,
                        song}, this.getSongResultOperationCompleted, userState);
        }
        
        private void OngetSongResultOperationCompleted(object arg) {
            if ((this.getSongResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSongResultCompleted(this, new getSongResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getArtist", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("albums")]
        public string[] getArtist(ref string artist) {
            object[] results = this.Invoke("getArtist", new object[] {
                        artist});
            artist = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getArtistAsync(string artist) {
            this.getArtistAsync(artist, null);
        }
        
        /// <remarks/>
        public void getArtistAsync(string artist, object userState) {
            if ((this.getArtistOperationCompleted == null)) {
                this.getArtistOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetArtistOperationCompleted);
            }
            this.InvokeAsync("getArtist", new object[] {
                        artist}, this.getArtistOperationCompleted, userState);
        }
        
        private void OngetArtistOperationCompleted(object arg) {
            if ((this.getArtistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getArtistCompleted(this, new getArtistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getAlbum", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("amazonLink")]
        public string getAlbum(ref string artist, ref string album, ref int year, out string[] songs) {
            object[] results = this.Invoke("getAlbum", new object[] {
                        artist,
                        album,
                        year});
            artist = ((string)(results[1]));
            album = ((string)(results[2]));
            year = ((int)(results[3]));
            songs = ((string[])(results[4]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAlbumAsync(string artist, string album, int year) {
            this.getAlbumAsync(artist, album, year, null);
        }
        
        /// <remarks/>
        public void getAlbumAsync(string artist, string album, int year, object userState) {
            if ((this.getAlbumOperationCompleted == null)) {
                this.getAlbumOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAlbumOperationCompleted);
            }
            this.InvokeAsync("getAlbum", new object[] {
                        artist,
                        album,
                        year}, this.getAlbumOperationCompleted, userState);
        }
        
        private void OngetAlbumOperationCompleted(object arg) {
            if ((this.getAlbumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAlbumCompleted(this, new getAlbumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#getHometown", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("country")]
        public string getHometown(string artist, out string state, out string hometown) {
            object[] results = this.Invoke("getHometown", new object[] {
                        artist});
            state = ((string)(results[1]));
            hometown = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getHometownAsync(string artist) {
            this.getHometownAsync(artist, null);
        }
        
        /// <remarks/>
        public void getHometownAsync(string artist, object userState) {
            if ((this.getHometownOperationCompleted == null)) {
                this.getHometownOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetHometownOperationCompleted);
            }
            this.InvokeAsync("getHometown", new object[] {
                        artist}, this.getHometownOperationCompleted, userState);
        }
        
        private void OngetHometownOperationCompleted(object arg) {
            if ((this.getHometownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getHometownCompleted(this, new getHometownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#postArtist", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("dataUsed")]
        public bool postArtist(bool overwriteIfExists, ref string artist, string[] albums, out string message) {
            object[] results = this.Invoke("postArtist", new object[] {
                        overwriteIfExists,
                        artist,
                        albums});
            artist = ((string)(results[1]));
            message = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void postArtistAsync(bool overwriteIfExists, string artist, string[] albums) {
            this.postArtistAsync(overwriteIfExists, artist, albums, null);
        }
        
        /// <remarks/>
        public void postArtistAsync(bool overwriteIfExists, string artist, string[] albums, object userState) {
            if ((this.postArtistOperationCompleted == null)) {
                this.postArtistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpostArtistOperationCompleted);
            }
            this.InvokeAsync("postArtist", new object[] {
                        overwriteIfExists,
                        artist,
                        albums}, this.postArtistOperationCompleted, userState);
        }
        
        private void OnpostArtistOperationCompleted(object arg) {
            if ((this.postArtistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.postArtistCompleted(this, new postArtistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#postAlbum", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("dataUsed")]
        public bool postAlbum(bool overwriteIfExists, ref string artist, ref string album, ref int year, string asin, string[] songs, out string message) {
            object[] results = this.Invoke("postAlbum", new object[] {
                        overwriteIfExists,
                        artist,
                        album,
                        year,
                        asin,
                        songs});
            artist = ((string)(results[1]));
            album = ((string)(results[2]));
            year = ((int)(results[3]));
            message = ((string)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void postAlbumAsync(bool overwriteIfExists, string artist, string album, int year, string asin, string[] songs) {
            this.postAlbumAsync(overwriteIfExists, artist, album, year, asin, songs, null);
        }
        
        /// <remarks/>
        public void postAlbumAsync(bool overwriteIfExists, string artist, string album, int year, string asin, string[] songs, object userState) {
            if ((this.postAlbumOperationCompleted == null)) {
                this.postAlbumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpostAlbumOperationCompleted);
            }
            this.InvokeAsync("postAlbum", new object[] {
                        overwriteIfExists,
                        artist,
                        album,
                        year,
                        asin,
                        songs}, this.postAlbumOperationCompleted, userState);
        }
        
        private void OnpostAlbumOperationCompleted(object arg) {
            if ((this.postAlbumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.postAlbumCompleted(this, new postAlbumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#postSong", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("dataUsed")]
        public bool postSong(bool overwriteIfExists, ref string artist, ref string song, string lyrics, string[] onAlbums, out string message) {
            object[] results = this.Invoke("postSong", new object[] {
                        overwriteIfExists,
                        artist,
                        song,
                        lyrics,
                        onAlbums});
            artist = ((string)(results[1]));
            song = ((string)(results[2]));
            message = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void postSongAsync(bool overwriteIfExists, string artist, string song, string lyrics, string[] onAlbums) {
            this.postSongAsync(overwriteIfExists, artist, song, lyrics, onAlbums, null);
        }
        
        /// <remarks/>
        public void postSongAsync(bool overwriteIfExists, string artist, string song, string lyrics, string[] onAlbums, object userState) {
            if ((this.postSongOperationCompleted == null)) {
                this.postSongOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpostSongOperationCompleted);
            }
            this.InvokeAsync("postSong", new object[] {
                        overwriteIfExists,
                        artist,
                        song,
                        lyrics,
                        onAlbums}, this.postSongOperationCompleted, userState);
        }
        
        private void OnpostSongOperationCompleted(object arg) {
            if ((this.postSongCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.postSongCompleted(this, new postSongCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:LyricWiki#postSong_flags", RequestNamespace="urn:LyricWiki", ResponseNamespace="urn:LyricWiki")]
        [return: System.Xml.Serialization.SoapElementAttribute("dataUsed")]
        public bool postSong_flags(bool overwriteIfExists, ref string artist, ref string song, string lyrics, string[] onAlbums, string flags, out string message) {
            object[] results = this.Invoke("postSong_flags", new object[] {
                        overwriteIfExists,
                        artist,
                        song,
                        lyrics,
                        onAlbums,
                        flags});
            artist = ((string)(results[1]));
            song = ((string)(results[2]));
            message = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void postSong_flagsAsync(bool overwriteIfExists, string artist, string song, string lyrics, string[] onAlbums, string flags) {
            this.postSong_flagsAsync(overwriteIfExists, artist, song, lyrics, onAlbums, flags, null);
        }
        
        /// <remarks/>
        public void postSong_flagsAsync(bool overwriteIfExists, string artist, string song, string lyrics, string[] onAlbums, string flags, object userState) {
            if ((this.postSong_flagsOperationCompleted == null)) {
                this.postSong_flagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpostSong_flagsOperationCompleted);
            }
            this.InvokeAsync("postSong_flags", new object[] {
                        overwriteIfExists,
                        artist,
                        song,
                        lyrics,
                        onAlbums,
                        flags}, this.postSong_flagsOperationCompleted, userState);
        }
        
        private void OnpostSong_flagsOperationCompleted(object arg) {
            if ((this.postSong_flagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.postSong_flagsCompleted(this, new postSong_flagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:LyricWiki")]
    public partial class SongResult {
        
        private string artistField;
        
        private string songField;
        
        /// <remarks/>
        public string artist {
            get {
                return this.artistField;
            }
            set {
                this.artistField = value;
            }
        }
        
        /// <remarks/>
        public string song {
            get {
                return this.songField;
            }
            set {
                this.songField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:LyricWiki")]
    public partial class LyricsResult {
        
        private string artistField;
        
        private string songField;
        
        private string lyricsField;
        
        private string urlField;
        
        /// <remarks/>
        public string artist {
            get {
                return this.artistField;
            }
            set {
                this.artistField = value;
            }
        }
        
        /// <remarks/>
        public string song {
            get {
                return this.songField;
            }
            set {
                this.songField = value;
            }
        }
        
        /// <remarks/>
        public string lyrics {
            get {
                return this.lyricsField;
            }
            set {
                this.lyricsField = value;
            }
        }
        
        /// <remarks/>
        public string url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:LyricWiki")]
    public partial class SOTDResult {
        
        private string artistField;
        
        private string songField;
        
        private string nominatedByField;
        
        private string reasonField;
        
        private string lyricsField;
        
        /// <remarks/>
        public string artist {
            get {
                return this.artistField;
            }
            set {
                this.artistField = value;
            }
        }
        
        /// <remarks/>
        public string song {
            get {
                return this.songField;
            }
            set {
                this.songField = value;
            }
        }
        
        /// <remarks/>
        public string nominatedBy {
            get {
                return this.nominatedByField;
            }
            set {
                this.nominatedByField = value;
            }
        }
        
        /// <remarks/>
        public string reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
            }
        }
        
        /// <remarks/>
        public string lyrics {
            get {
                return this.lyricsField;
            }
            set {
                this.lyricsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void checkSongExistsCompletedEventHandler(object sender, checkSongExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkSongExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkSongExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void searchArtistsCompletedEventHandler(object sender, searchArtistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchArtistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchArtistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void searchAlbumsCompletedEventHandler(object sender, searchAlbumsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchAlbumsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchAlbumsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void searchSongsCompletedEventHandler(object sender, searchSongsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchSongsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchSongsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SongResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SongResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void getSOTDCompletedEventHandler(object sender, getSOTDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSOTDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSOTDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SOTDResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SOTDResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void getSongCompletedEventHandler(object sender, getSongCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSongCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSongCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LyricsResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LyricsResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void getSongResultCompletedEventHandler(object sender, getSongResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSongResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSongResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LyricsResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LyricsResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void getArtistCompletedEventHandler(object sender, getArtistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getArtistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getArtistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string artist {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void getAlbumCompletedEventHandler(object sender, getAlbumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAlbumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAlbumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string artist {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string album {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int year {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string[] songs {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void getHometownCompletedEventHandler(object sender, getHometownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getHometownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getHometownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string state {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string hometown {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void postArtistCompletedEventHandler(object sender, postArtistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class postArtistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal postArtistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string artist {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void postAlbumCompletedEventHandler(object sender, postAlbumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class postAlbumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal postAlbumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string artist {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string album {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int year {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void postSongCompletedEventHandler(object sender, postSongCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class postSongCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal postSongCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string artist {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string song {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    public delegate void postSong_flagsCompletedEventHandler(object sender, postSong_flagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class postSong_flagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal postSong_flagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string artist {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string song {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
}

#pragma warning restore 1591